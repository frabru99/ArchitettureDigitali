$date
  Wed Oct 04 11:20:57 2023
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$var reg 16 ! input_16_4[0:15] $end
$var reg 4 " output_16_4[0:3] $end
$var reg 4 # control_16_1_sis[0:3] $end
$var reg 2 $ control_1_4_sis[0:1] $end
$scope module dut $end
$var reg 16 % input_16_4[0:15] $end
$var reg 4 & output_16_4[0:3] $end
$var reg 4 ' control_16_1_sis[0:3] $end
$var reg 2 ( control_1_4_sis[0:1] $end
$var reg 1 ) output $end
$scope module mux $end
$var reg 16 * input_16_1[0:15] $end
$var reg 4 + control_16_1[0:3] $end
$var reg 1 , y_16_1 $end
$var reg 4 - outputs[0:3] $end
$scope module mux0 $end
$var reg 4 . input_4_1[0:3] $end
$var reg 2 / control_4_1[0:1] $end
$var reg 1 0 y_4_1 $end
$upscope $end
$scope module mux1 $end
$var reg 4 1 input_4_1[0:3] $end
$var reg 2 2 control_4_1[0:1] $end
$var reg 1 3 y_4_1 $end
$upscope $end
$scope module mux2 $end
$var reg 4 4 input_4_1[0:3] $end
$var reg 2 5 control_4_1[0:1] $end
$var reg 1 6 y_4_1 $end
$upscope $end
$scope module mux3 $end
$var reg 4 7 input_4_1[0:3] $end
$var reg 2 8 control_4_1[0:1] $end
$var reg 1 9 y_4_1 $end
$upscope $end
$scope module mux4 $end
$var reg 4 : input_4_1[0:3] $end
$var reg 2 ; control_4_1[0:1] $end
$var reg 1 < y_4_1 $end
$upscope $end
$upscope $end
$scope module demux $end
$var reg 1 = input_1_4 $end
$var reg 4 > output_1_4[0:3] $end
$var reg 2 ? control_1_4[0:1] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
b0000000000000000 !
b0000 "
b0000 #
b00 $
b0000000000000000 %
b0000 &
b0000 '
b00 (
0)
b0000000000000000 *
b0000 +
0,
b0000 -
b0000 .
b00 /
00
b0000 1
b00 2
03
b0000 4
b00 5
06
b0000 7
b00 8
09
b0000 :
b00 ;
0<
0=
b0000 >
b00 ?
#10000000
b0000000010000000 !
b0010 "
b0001 #
b01 $
b0000000010000000 %
b0010 &
b0001 '
b01 (
1)
b0000000010000000 *
b0001 +
1,
b0010 -
b1000 4
16
b0010 :
b01 ;
1<
1=
b0010 >
b01 ?
#20000000
